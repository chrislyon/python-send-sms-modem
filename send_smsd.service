#!/bin/sh
#
# /etc/init.d/send_smsd
#
### BEGIN INIT INFO
# Provides:          send_smsd
# Required-Start:    $network $remote_fs $syslog
# Should-Start:      $time
# Required-Stop:     $syslog $remote_fs
# Should-Stop: 
# Default-Start:     3 5
# Default-Stop:      0 1 2 6
# Short-Description: SMS Pile FIFO
# Description:       Start send_smsd
### END INIT INFO

# Check for missing binaries (stale symlinks should not happen)
# Note: Special treatment of stop for LSB conformance
#ZABBIX_AGENTD_BIN=/usr/sbin/zabbix_agentd
#test -x $ZABBIX_AGENTD_BIN || { echo "$ZABBIX_AGENTD_BIN not installed"; 
#	if [ "$1" = "stop" ]; then exit 0;
#	else exit 5; fi; }

SEND_SMSD=/usr/local/bin/send_smsd

# Check for existence of needed config file and read it
#ZABBIX_AGENTD_CONFIG=/etc/zabbix_agentd.conf
#test -r $ZABBIX_AGENTD_CONFIG || { echo "$ZABBIX_AGENTD_CONFIG not existing";
#	if [ "$1" = "stop" ]; then exit 0;
#	else exit 6; fi; }

# Get pid file name from config
#PidFile=$(grep ^PidFile $ZABBIX_AGENTD_CONFIG|cut -d "=" -f 2)
PidFile=/var/run/send_smsd/send_smsd.pid
SEND_SMSD_FIFO=/var/run/send_smsd/send_smsd.fifo

# Source LSB init functions
# providing start_daemon, killproc, pidofproc, 
# log_success_msg, log_failure_msg and log_warning_msg.
# This is currently not used by UnitedLinux based distributions and
# not needed for init scripts for UnitedLinux only. If it is used,
# the functions from rc.status should not be sourced or used.
#. /lib/lsb/init-functions

# Shell functions sourced from /etc/rc.status:
#      rc_check         check and set local and overall rc status
#      rc_status        check and set local and overall rc status
#      rc_status -v     be verbose in local rc status and clear it afterwards
#      rc_status -v -r  ditto and clear both the local and overall rc status
#      rc_status -s     display "skipped" and exit with status 3
#      rc_status -u     display "unused" and exit with status 3
#      rc_failed        set local and overall rc status to failed
#      rc_failed <num>  set local and overall rc status to <num>
#      rc_reset         clear both the local and overall rc status
#      rc_exit          exit appropriate to overall rc status
#      rc_active        checks whether a service is activated by symlinks
. /etc/rc.status

# Reset status of this service
rc_reset

# Return values acc. to LSB for all commands but status:
# 0       - success
# 1       - generic or unspecified error
# 2       - invalid or excess argument(s)
# 3       - unimplemented feature (e.g. "reload")
# 4       - user had insufficient privileges
# 5       - program is not installed
# 6       - program is not configured
# 7       - program is not running
# 8--199  - reserved (8--99 LSB, 100--149 distrib, 150--199 appl)
# 
# Note that starting an already running service, stopping
# or restarting a not-running service as well as the restart
# with force-reload (in case signaling is not supported) are
# considered a success.

case "$1" in
    start)
		echo -n "Starting SENS SMS Fifo"
		## Start daemon with startproc(8). If this fails
		## the return value is set appropriately by startproc.
		/sbin/startproc -p $PidFile $SEND_SMSD

		# Remember status and be verbose
		rc_status -v
		;;
    stop)
		echo -n "Shutting down SEND SMS FIfo"
		echo "STOP" > $SEND_SMSD_FIFO
		## Stop daemon with killproc(8) and if this fails
		## killproc sets the return value according to LSB.

		#/sbin/killproc -p $PidFile -TERM $ZABBIX_AGENTD_BIN

		# Remember status and be verbose
		rc_status -v
		;;
    restart)
		## Stop the service and regardless of whether it was
		## running or not, start it again.
		$0 stop
		$0 start

		# Remember status and be quiet
		rc_status
		;;
    *)
		echo "Usage: $0 {start|stop|status|try-restart|restart|force-reload|reload|probe}"
		exit 1
		;;
esac
rc_exit
